using UnityEditor;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEditor.UIElements;

public partial class ExampleWindow : EditorWindow
{
    [MenuItem("Window/ExampleWindow")]
    static void Init()
    {
        GetWindow<ExampleWindow>(typeof(SceneView));
    }

    void OnEnable()
    {
        var scrollView = new ScrollView();
        scrollView.Add(new Label("IMouseEvent"));

        foreach (var type in TypeCache.GetTypesDerivedFrom<IMouseEvent>())
        {
            if (type.IsAbstract) { continue; }
            var hor = new VisualElement
            {

            };
            // Debug.Log($"IMouse:{type.Name}");
            var field = new TextField(type.Name);
            scrollView.Add(field);
        }
        // new PopupField<string>().RegisterValueChangedCallback(x=>{});
        scrollView.Add(new Label("EventBase"));
        foreach (var type in TypeCache.GetTypesDerivedFrom<EventBase>())
        {
            if (type.IsAbstract) { continue; }
            // Debug.Log($"IMouse:{type.Name}");
            var field = new TextField(type.Name);
            field.RegisterCallback<ChangeEvent<string>>(x => { Debug.Log($"Changed value to:{x.newValue}"); });
            var doubleClickManipulator = new MouseDoubleClickManipulator()
            .RegisterDoubleClick(() => Debug.Log($"Double Button Clicked."));
            field.AddManipulator(doubleClickManipulator);
            scrollView.Add(field);
        }
        // scrollView.Add(new Label("INotifyValueChanged"));
        // foreach (var type in TypeCache.GetTypesDerivedFrom<INotifyValueChanged<string>>())
        // {
        //     if (type.IsAbstract) { continue; }
        //     // Debug.Log($"IMouse:{type.Name}");
        //     var field = new TextField(type.Name);
        //     scrollView.Add(field);
        // }


        rootVisualElement.Add(scrollView);

        // button1 = rootVisualElement.Q<Button>();
        // var ve = new VisualElement();
        var ve = new IMGUIContainer(() =>
        {
            EditorGUILayout.LabelField("ONGUI");
        });
        ve.style.backgroundColor = Color.red;
        ve.style.width = 100;
        ve.style.height = 50;
        // var ve = rootVisualElement.Q();
        rootVisualElement.Add(ve);
    }
}

//AUTOGENERATED
public partial class ExampleWindow
{
    void RegisterCallbacks()
    {
        rootVisualElement.Q<Button>("button1").clicked += OnClick_button1;
    }
}

public partial class ExampleWindow
{
    void OnClick_button1()
    {

        // rootVisualElement.Q<VisualElement>("button1").RegisterCallback<>.clicked += OnClick_button1;
    }

    void OnMouseDownEvent_button1(MouseDownEvent evt) { }

}